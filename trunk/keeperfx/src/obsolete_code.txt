struct SacrificeRecipe sacrifices[] = {
  // Barbarian + Monk + Knight + Thief + Samurai + Dark Mistress = Avatar (KeeperFX only)
  {{ 2, 4, 6,12,13,20},SacA_MkGoodHero ,  7},
  // Spider + Spider + Spider = Bile Demon
  {{26,26,26, 0, 0, 0},SacA_MkCreature , 22},
  // Troll + Bile Demon + Dark Mistress = Horned Reaper
  {{16,20,22, 0, 0, 0},SacA_MkCreature , 14},
  // Dragon + Hell Hound + Orc = Horned Reaper (KeeperFX only)
  {{17,27,30, 0, 0, 0},SacA_MkCreature , 14},
  // Fly + Dark Mistress + Warlock = Fairy (KeeperFX only)
  {{19,20,21, 0, 0, 0},SacA_MkCreature , 11},
  // Thief + Demon Spawn + Beetle = Skeleton (KeeperFX only)
  {{12,18,24, 0, 0, 0},SacA_MkCreature , 15},
  // Fly + Fly = Finishes current research
  {{19,19, 0, 0, 0, 0},SacA_PosUniqFunc, UnqF_ComplResrch},
  // Beetle + Beetle = Finishes current manufacturing
  {{24,24, 0, 0, 0, 0},SacA_PosUniqFunc, UnqF_ComplManufc},
  // Vampire + Vampire = All your creatures become diseased
  {{25,25, 0, 0, 0, 0},SacA_NegSpellAll, 26},
  // Fly + Spider = Warlock
  {{19,26, 0, 0, 0, 0},SacA_MkCreature , 21},
  // Beetle + Spider = Dark Mistress
  {{24,26, 0, 0, 0, 0},SacA_MkCreature , 20},
  // Bile Demon + Bile Demon = All your creatures become chickens
  {{22,22, 0, 0, 0, 0},SacA_NegSpellAll, 27},
  // Warlock + Warlock = Wizard (KeeperFX only)
  {{21,21, 0, 0, 0, 0},SacA_MkCreature ,  1},
  // Orc + Orc = Barbarian (KeeperFX only)
  {{30,30, 0, 0, 0, 0},SacA_MkCreature ,  2},
  // Troll + Warlock = Archer (KeeperFX only)
  {{16,21, 0, 0, 0, 0},SacA_MkCreature ,  3},
  // Troll + Tunneller = Dwarf (KeeperFX only)
  {{16, 8, 0, 0, 0, 0},SacA_MkCreature ,  5},
  // Bile Demon + Orc = Giant (KeeperFX only)
  {{22,30, 0, 0, 0, 0},SacA_MkCreature , 10},
  // Demon Spawn + Fly = Ghost (KeeperFX only)
  {{18,19, 0, 0, 0, 0},SacA_MkCreature , 28},
  // Demon Spawn + Orc = Tentacle (KeeperFX only)
  {{18,30, 0, 0, 0, 0},SacA_MkCreature , 29},
  // Troll + Demon Spawn = Orc (KeeperFX only)
  {{16,18, 0, 0, 0, 0},SacA_MkCreature , 30},
  // Troll + Spider = Tentacle (KeeperFX only)
  {{16,26, 0, 0, 0, 0},SacA_MkCreature,  29},
  // Dragon + Fly = Hell Hound (KeeperFX only)
  {{17,19, 0, 0, 0, 0},SacA_MkCreature,  27},
  // Fly + Hell Hound = Speed All Creatures (KeeperFX only)
  {{19,27, 0, 0, 0, 0},SacA_PosSpellAll, 11},
  // Thief + Thief = Invisibility All Creatures (KeeperFX only)
  {{12,12, 0, 0, 0, 0},SacA_PosSpellAll,  9},
  // Monk + Spider = Heals All Creatures (KeeperFX only)
  {{ 4,26, 0, 0, 0, 0},SacA_PosSpellAll,  7},
  // Wizard + Witch = Rebound All Creatures (KeeperFX only)
  {{ 1, 9, 0, 0, 0, 0},SacA_PosSpellAll,  6},
  // Bile Demon + Beetle = Protect All Creatures (KeeperFX only)
  {{22,24, 0, 0, 0, 0},SacA_PosSpellAll,  4},
  // Horned Reaper = make all creatures angry
  {{14, 0, 0, 0, 0, 0},SacA_NegUniqFunc, UnqF_MkAllAngry},
  // Imp = Nothing, only the message
  {{23, 0, 0, 0, 0, 0},SacA_PosUniqFunc, UnqF_CheaperImp},
  // Ghost = All your chickens die
  {{28, 0, 0, 0, 0, 0},SacA_NegUniqFunc, UnqF_KillChickns},
  // Empty slot
  {{ 0, 0, 0, 0, 0, 0},SacA_None       ,  0},
};


void creature_sacrifice_reset(struct Dungeon *dungeon,long model1,long model2,long model3)
{
  if (model1 > 0)
  {
    dungeon->creature_sacrifice[model1] = 0;
    dungeon->creature_sacrifice_exp[model1] = 0;
  }
  if (model2 > 0)
  {
    dungeon->creature_sacrifice[model2] = 0;
    dungeon->creature_sacrifice_exp[model2] = 0;
  }
  if (model3 > 0)
  {
    dungeon->creature_sacrifice[model3] = 0;
    dungeon->creature_sacrifice_exp[model3] = 0;
  }
}

// TODO: change to get one parameter (sacrifice index in a 'sacifices' array)
long creature_sacrifice_average_explevel(struct Dungeon *dungeon,long model1,long model2,long model3)
{
  long num;
  long exp;
  num = 0;
  exp = 0;
  if (model1 > 0)
  {
    num += dungeon->creature_sacrifice[model1];
    exp += dungeon->creature_sacrifice_exp[model1];
  }
  if (model2 > 0)
  {
    num += dungeon->creature_sacrifice[model2];
    exp += dungeon->creature_sacrifice_exp[model2];
  }
  if (model3 > 0)
  {
    num += dungeon->creature_sacrifice[model3];
    exp += dungeon->creature_sacrifice_exp[model3];
  }
  if (num < 1) num = 1;
  exp = (exp/num);
  if (exp < 0) return 0;
  if (exp >= CREATURE_MAX_LEVEL) return CREATURE_MAX_LEVEL-1;
  return exp;
}

long process_hardcoded_sacrifice_award(struct Coord3d *pos, long model, long plyr_idx)
{
  struct Dungeon *dungeon;
  long explevel;
  //return _DK_process_sacrifice_award(pos, model, plyr_idx);
  if ((plyr_idx < 0) || (plyr_idx >= DUNGEONS_COUNT))
  {
    ERRORLOG("How can you sacrifice a neutral creature?");
    return 0;
  }
  dungeon = &(game.dungeon[plyr_idx]);
  switch (model)
  {
  case 14:
      // 1 Horned Reaper = make all creatures angry
      if (dungeon->creature_sacrifice[14] > 0)
      {
        make_all_players_creatures_angry(plyr_idx);
        creature_sacrifice_reset(dungeon,0,0,14);
        return 3;
      }
      return -1;
  case 19:
      // 2 Flies = Finishes current research
      if (dungeon->creature_sacrifice[19] > 1)
      {
        force_complete_current_research(plyr_idx);
        creature_sacrifice_reset(dungeon,0,0,19);
        return 2;
      }
      // 1 Fly + 1 Spider = 1 Warlock (copy)
      if ( (dungeon->creature_sacrifice[19] > 0)
        && (dungeon->creature_sacrifice[26] > 0) )
      {
        explevel = creature_sacrifice_average_explevel(dungeon,0,26,19);
        if ( summon_creature(21, pos, plyr_idx, explevel) )
          dungeon->lvstats.creatures_from_sacrifice++;
        creature_sacrifice_reset(dungeon,0,26,19);
        return 2;
      }
      return 1;
  case 23:
      return 1;
      break;
  case 24:
      // 2 Beetles = Finishes current manufacturing
      if (dungeon->creature_sacrifice[24] > 1)
      {
        force_complete_current_manufacturing(plyr_idx);
        creature_sacrifice_reset(dungeon,0,0,24);
        return 2;
      }
      // 1 Beetle + 1 Spider = 1 Dark Mistress (copy)
      if ( (dungeon->creature_sacrifice[24] > 0)
        && (dungeon->creature_sacrifice[26] > 0) )
      {
        explevel = creature_sacrifice_average_explevel(dungeon,0,19,26);
        if ( summon_creature(20, pos, plyr_idx, explevel) )
          dungeon->lvstats.creatures_from_sacrifice++;
        creature_sacrifice_reset(dungeon,0,26,24);
        return 2;
      }
      return 1;
  case 25:
      // 2 Vampires = All your creatures become diseased
      if (dungeon->creature_sacrifice[25] > 1)
      {
        explevel = creature_sacrifice_average_explevel(dungeon,0,0,25);
        apply_spell_effect_to_players_creatures(plyr_idx, 26, explevel);
        creature_sacrifice_reset(dungeon,0,0,25);
        return 3;
      }
      return -1;
  case 26:
      // 3 Spiders = 1 Bile Demon
      if (dungeon->creature_sacrifice[26] > 2)
      {
        explevel = ((model - 14) / dungeon->creature_sacrifice[26]);
        if ( summon_creature(22, pos, plyr_idx, explevel) )
          dungeon->lvstats.creatures_from_sacrifice++;
        creature_sacrifice_reset(dungeon,0,0,26);
        return 2;
      }
      // 1 Fly + 1 Spider = 1 Warlock
      if ( (dungeon->creature_sacrifice[19] > 0)
        && (dungeon->creature_sacrifice[26] > 0) )
      {
        explevel = creature_sacrifice_average_explevel(dungeon,0,19,26);
        if ( summon_creature(21, pos, plyr_idx, explevel) )
          dungeon->lvstats.creatures_from_sacrifice++;
        creature_sacrifice_reset(dungeon,0,19,26);
        return 2;
      }
      // 1 Beetle + 1 Spider = 1 Dark Mistress
      if ( (dungeon->creature_sacrifice[24] > 0)
        && (dungeon->creature_sacrifice[26] > 0) )
      {
        explevel = creature_sacrifice_average_explevel(dungeon,0,24,26);
        if ( summon_creature(20, pos, plyr_idx, explevel) )
          dungeon->lvstats.creatures_from_sacrifice++;
        creature_sacrifice_reset(dungeon,0,24,26);
        return 2;
      }
      return 1;
  case 28:
       // 1 Ghost = All your chickens die
      if (dungeon->creature_sacrifice[28] > 0)
      {
        kill_all_players_chickens(plyr_idx);
        creature_sacrifice_reset(dungeon,0,0,28);
        return 3;
      }
      return -1;
  case 22:
      // 2 Bile Demons = All your creatures become chickens
      if (dungeon->creature_sacrifice[22] > 1)
      {
        explevel = creature_sacrifice_average_explevel(dungeon,0,0,22);
        apply_spell_effect_to_players_creatures(plyr_idx, 27, explevel);
        creature_sacrifice_reset(dungeon,0,0,22);
        return 3;
      }
  case 16:
  case 20:
      // 1 Troll + 1 Bile Demon + 1 Dark Mistress = 1 Horned Reaper
      if ( (dungeon->creature_sacrifice[20] > 0)
        && (dungeon->creature_sacrifice[22] > 0)
        && (dungeon->creature_sacrifice[16] > 0) )
      {
        explevel = creature_sacrifice_average_explevel(dungeon,22,20,16);
        if ( summon_creature(14, pos, plyr_idx, explevel) )
          dungeon->lvstats.creatures_from_sacrifice++;
        creature_sacrifice_reset(dungeon,22,20,16);
        return 2;
      }
      return 1;
  default:
      return 0;
  }
}


void frontnet_init_level_descriptions(void)
{
  static const char *func_name="frontnet_init_level_descriptions";
  char *buf;
  char *buf_end;
  long i;
  //_DK_frontnet_init_level_descriptions();
 TODO: instead of this, .LOF file should be extended to store all map info
  lbFontPtr = frontend_font[1];
  buf = level_names_data;
  net_number_of_levels = 0;
  while (1)
  {
    if (net_number_of_levels >= 100)
    {
      error(func_name, 298, "Reached max amount of level names information entries");
      return;
    }
    // Recognize numeric values
    i = strtol(buf,&buf_end,0);
    if (i == 0) return; // If can't read first, then it must be end of data
    buf = buf_end+1;
    net_level_desc[net_number_of_levels].lvnum = i;
    i = strtol(buf,&buf_end,0);
    if (i == 0) break;
    buf = buf_end+1;
    net_level_desc[net_number_of_levels].field_1 = i;
    i = strtol(buf,&buf_end,0);
    if (i == 0) break;
    buf = buf_end+1;
    net_level_desc[net_number_of_levels].field_2 = i;
    i = strtol(buf,&buf_end,0);
    if (i == 0) break;
    buf = buf_end+1;
    net_level_desc[net_number_of_levels].field_6 = i;
    net_level_desc[net_number_of_levels].text = buf;
    net_number_of_levels++;
    // Mark end of the name string
    buf_end = buf;
    while (*buf_end >= 32)
    {
      buf_end++;
      if (buf_end >= end_level_names_data)
      {
        error(func_name, 293, "Buffer exceeded when parsing level names information file");
        return;
      }
    }
    *buf_end = '\0';
    while (*(unsigned char *)buf_end <= 32)
    {
      buf_end++;
      if (buf_end >= end_level_names_data)
      {
        return;
      }
    }
    buf = buf_end;
  }
  error(func_name, 298, "Can't recognize one of numerical values in level names information file");
}


/*
    lbDisplay.DrawFlags = 0;
    for (i=0; i < net_number_of_levels; i++)
    {
      lvdesc = &net_level_desc[i];
      if (lvdesc->field_1 >= net_number_of_players)
      {
        switch (lvdesc->field_1)
        {
        case 2:
          spr = get_map_flag(5);
          break;
        case 3:
          spr = get_map_flag(7);
          break;
        case 4:
          spr = get_map_flag(9);
          break;
        default:
          LbErrorLog("%s: Invalid number of players in level %d description",func_name,lvdesc->lvnum);
          return;
        }
        if ((fe_net_level_selected == i) || (net_level_hilighted == i))
          spr++;
        LbSpriteDraw(lvdesc->field_2 - map_info.scrshift_x, lvdesc->field_6 - map_info.scrshift_y, spr);
      }
    }
*/



short copy_lowres_image_to_screen(const unsigned char *buf,const int img_width,const int img_height)
{
  if (LbScreenLock()!=1)
    return false;
  int w,h;
  unsigned char *dst;
  const unsigned char *src;
  if ((lbDisplay.ScreenMode!=Lb_SCREEN_MODE_640_400_8) &&
      (lbDisplay.ScreenMode!=Lb_SCREEN_MODE_640_480_8))
  {
    dst = lbDisplay.WScreen;
    src = buf;
    for (h=img_height;h>0;h--)
    {
          memcpy(dst, src, img_width);
          src += img_width;
          dst += lbDisplay.GraphicsScreenWidth;
    }
  } else
  {
        if ( lbDisplay.ScreenMode == Lb_SCREEN_MODE_640_480_8 )
        {
          dst = lbDisplay.WScreen + 40*lbDisplay.GraphicsScreenWidth;
        } else
        {
          dst = lbDisplay.WScreen;
        }
        src = buf;
        for (h=img_height;h>0;h--)
        {
          for (w=img_width;w>0;w--)
          {
            dst[0] = *src;
            dst[1] = *src;
            dst += 2;
            src++;
          }
          memcpy(dst+lbDisplay.GraphicsScreenWidth-640, dst-640, 640);
          dst += (lbDisplay.GraphicsScreenWidth<<1)-640;
        }
  }
  perform_any_screen_capturing();
  LbScreenUnlock();
  LbScreenSwap();
  return true;
}



void reset_menu_position(struct GuiMenu *gmnu)
{
  if (gmnu->align == CA_None)
  {
    gmnu->usrpos_x = gmnu->pos_x;
    gmnu->usrpos_y = gmnu->pos_y;
    return;
  }
  int delata_x = MyScreenWidth-gmnu->width;
  int delata_y = MyScreenHeight-gmnu->height;
  if (gmnu->align & CA_AlignMiddle)
    gmnu->usrpos_y = gmnu->pos_y + (delata_y>>1);
  else
  if (gmnu->align & CA_AlignBottom)
    gmnu->usrpos_y = gmnu->pos_y + delata_y;
  else
    gmnu->usrpos_y = gmnu->pos_y;

  if (gmnu->align & CA_AlignCenter)
    gmnu->usrpos_x = gmnu->pos_x + (delata_x>>1);
  else
  if (gmnu->align & CA_AlignRight)
    gmnu->usrpos_x = gmnu->pos_x + delata_x;
  else
    gmnu->usrpos_x = gmnu->pos_x;
}

void reset_menus_positions(void)
{
  const unsigned int menus_count = sizeof(menu_list)/sizeof(struct GuiMenu *);
  int i;
  for (i=0; i<menus_count; i++)
  {
   struct GuiMenu *gmnu;
   gmnu = menu_list[i];
   if (gmnu != NULL)
     reset_menu_position(gmnu);
  }
}


short keeper_check_if_shall_draw(void)
{
  if ((game.numfield_C & 0x01) != 0)
    return true;
  if ( (game.turns_fastforward==0) && (!game.numfield_149F38) )
  {
          unsigned long curr_time;
          curr_time = clock();
          cntr_time2++;
          if ( curr_time-prev_time2 >= 1000 )
          {
              double time_fdelta = 1000.0*((double)(cntr_time2))/(curr_time-prev_time2);
              prev_time2 = curr_time;
              game.time_delta = (unsigned long)(time_fdelta*256.0);
              cntr_time2 = 0;
          }
          if ( (game.timingvar1!=0) && (game.seedchk_random_used % game.timingvar1) )
          {
            return false;
          }
  } else
  if ( ((game.seedchk_random_used & 0x3F)==0) ||
       ((game.numfield_149F38) && ((game.seedchk_random_used & 7)==0)) )
  {
            TbClockMSec curr_time;
            curr_time = clock();
            if ((curr_time-prev_time1) < 5000)
            {
              cntr_time1 += 64;
            } else
            {
              double time_fdelta = 1000.0*((double)(cntr_time1+64))/(curr_time-prev_time1);
              prev_time1 = curr_time;
              game.time_delta = (unsigned long)(time_fdelta*256.0);
              cntr_time1 = 0;
            }
  } else
  {
      return false;
  }
  return true;
}


enum TbComponentAlign {
    CA_None        = 0x00,
    CA_AlignTop    = 0x01,
    CA_AlignMiddle = 0x02,
    CA_AlignBottom = 0x04,
    CA_AlignLeft   = 0x10,
    CA_AlignCenter = 0x20,
    CA_AlignRight  = 0x40,
};

#define CA_TopLeft  CA_AlignTop|CA_AlignLeft
#define CA_TopCntr  CA_AlignTop|CA_AlignCenter
#define CA_Center   CA_AlignMiddle|CA_AlignCenter



/*TODO: requires clientDataTable and maximumPlayers
short check_host_id(unsigned long *src_id)
{
  short result;
  struct ClientDataEntry *cent;
  unsigned int i;
  result = 0;
  for (i=0; i<maximumPlayers; i++)
  {
    cent = &clientDataTable[i];
    if ( (cent->field_4) && (cent->field_0 == (*src_id)))
    {
      result = 1;
      (*src_id) = i;
    }
  }
  return result;
}*/

/*TODO: requires exported variables
void * __stdcall MultiPlayerCallback(unsigned long src_id, unsigned long seq_length, unsigned long seq_num, void *buf)
{
//  if ( dword_538E48 ) - variable from DK Premium
//    TRACE("GOT A REQUEST MultiPlayerCallback\n");
  if (hostId == localPlayerId)
  {
    if (seq_length != exchangeSize)
    {
      TRACE("  WARNING network: UserDataMsgCallback() invalid length: %d\n", seq_length);
      return NULL;
    }
    if (src_id == localPlayerId)
    {
      TRACE("  WARNING network: UserDataMsgCallback() host got data from itself\n");
      return NULL;
    }
    if (!check_host_id(&src_id))
    {
      TRACE("  WARNING network: UserDataMsgCallback() invalid id: %d\n", src_id);
      return NULL;
    }
    if ((seq_num==sequenceNumber) || (seq_num==15))
    {
      TRACE("  WARNING network: UserDataMsgCallback() Unexpected sequence number: Got %d, expected %d\n",seq_num,sequenceNumber);
      return NULL;
    }
    clientDataTable[src_id].field_8 = 1;
    return (unsigned char *)exchangeBuffer + exchangeSize*src_id;
  } else
  if ( exchangeSize*maximumPlayers == seq_length )
  {
    if ( hostId != src_id )
    {
      TRACE("  WARNING network: UserDataMsgCallback() data is not from host\n");
      return NULL;
    }
    if ( !check_host_id(&src_id) )
    {
      TRACE("  WARNING network: UserDataMsgCallback() invalid id: %d\n", src_id);
      return NULL;
    }
    if ( sequenceNumber == 15 )
    {
      sequenceNumber = seq_num;
    } else
    if ( seq_num != sequenceNumber )
    {
      TRACE("  WARNING network: UserDataMsgCallback() Unexpected sequence number: Got %d, expected %d\n",seq_num,sequenceNumber);
      return NULL;
    }
    gotCompositeData = 1;
    return (unsigned char *)exchangeBuffer;
  } else
  {
    if ( seq_length != exchangeSize )
    {
      TRACE("  WARNING network: UserDataMsgCallback() invalid length: %d\n", seq_length);
      return NULL;
    }
    if ( src_id == localPlayerId )
    {
      TRACE("  WARNING network: UserDataMsgCallback() client acting as host got data from itself\n");
      return NULL;
    }
    if ( !check_host_id(&src_id) )
    {
      TRACE("  WARNING network: UserDataMsgCallback() invalid id: %d\n", src_id);
      return NULL;
    }
    clientDataTable[src_id].field_8 = 1;
    return (unsigned char *)exchangeBuffer + exchangeSize*src_id;
  }
}*/

/*TODO: requires ServiceProvider and HostDataCollection
void __stdcall MultiPlayerReqExDataMsgCallback(unsigned long src_id, unsigned long seqNum, void *buf)
{
//  if ( dword_538E48 ) - variable from DK Premium
//    TRACE("GOT A REQUEST MultiPlayerReqExDataMsgCallback\n");
  if (localDataPtr == NULL)
  {
    TRACE("  WARNING network: RequestExchangeDataMsgCallback() NULL data pointer\n");
    return;
  }
  if (sequenceNumber == 15)
  {
    sequenceNumber = seqNum;
  } else
  if (sequenceNumber != seqNum)
  {
    TRACE("  WARNING network: RequestExchangeDataMsgCallback() unexpected sequence number, got %d, expected %d\n",seqNum,sequenceNumber);
    return;
  }
  ServiceProvider::EncodeMessageStub(localDataPtr, exchangeSize-4, 0, sequenceNumber);
  if ( HostDataCollection(src_id, localDataPtr) )
  {
    TRACE("  WARNING network: RequestExchangeDataMsgCallback() failure on SP::Send()\n");
    return;
  }
}*/

TbError GenericIPXInit(struct _GUID guid)
{
  //TODO
  return -1;
}

TbError GenericSerialInit(struct _GUID guid,void *)
{
  //TODO
  return -1;
}

TbError GenericModemInit(struct _GUID guid,void *)
{
  //TODO
  return -1;
}

TbError DPlayInit(struct _GUID guid,struct _GUID *cliguid)
{
  //TODO
  return -1;
}

TbError LbNetwork_Init(unsigned long srvcp,struct _GUID guid, unsigned long maxplayrs, void *exchng_buf, unsigned long exchng_size, struct TbNetworkPlayerInfo *locplayr, struct SerialInitData *init_data)
{
  return _DK_LbNetwork_Init(srvcp,guid,maxplayrs,exchng_buf,exchng_size,locplayr,init_data);
  //TODO
  long dpidx;
  exchangeBuffer = exchng_buf;
  exchangeSize = exchng_size;
  maximumPlayers = maxplayrs;
  localPlayerInfoPtr = locplayr;
  localDataPtr = 0;
  compositeBuffer = 0;
  sequenceNumber = 0;
  timeCount = 0;
  maxTime = 0;
  runningTwoPlayerModel = 0;
  waitingForPlayerMapResponse = 0;
  compositeBufferSize = 0;
  basicTimeout = 250;
//  receiveCallbacks_offs24 = NULL; //probably not needed
//  receiveCallbacks.multi_player = MultiPlayerCallback;
//  receiveCallbacks.mp_req_exdata_msg = MultiPlayerReqExDataMsgCallback;
  if (exchng_size > 0)
  {
    compositeBufferSize = maxplayrs * exchng_size;
    compositeBuffer = LbMemoryAlloc(compositeBufferSize);
    if (compositeBuffer == NULL)
    {
      TRACE("WARNING network: LbNetwork_Init() failure on compositeBuffer allocation\n");
      return -1;
    }
  }
  int k;

  memset(clientDataTable, 0, sizeof(clientDataTable));
  for(k=0; k<maximumPlayers; k++)
    clientDataTable[k].field_4 = 0;

  for (k=0; k<maximumPlayers; k++)
  {
      net_player_info[k].field_20 = 0;
      strcpy(net_player_info[k].field_0, "");
  }
  switch (srvcp)
  {
  case 0:
      TRACE("Selecting Win95 Serial SP\n");
      if ( GenericSerialInit(guid, init_data) )
      {
        TRACE("WARNING network: LbNetwork_Init() failure on GenericSerialInit()\n");
        return -1;
      }
      break;
  case 1:
      TRACE("Selecting Win95 Modem SP\n");
      if ( GenericModemInit(guid, init_data) )
      {
        TRACE("WARNING network: LbNetwork_Init() failure on GenericModemInit()\n");
        return -1;
      }
      break;
  case 2:
      TRACE("Selecting Win95 IPX SP\n");
      if ( GenericIPXInit(guid) )
      {
        TRACE("WARNING network: LbNetwork_Init() failure on GenericIPXInit()\n");
        return -1;
      }
      break;
  case 3:
  default:
      dpidx = srvcp-3;
      TRACE("Selecting a Direct Play SP\n");
      if ((dpidx<0) || (dpidx >= noOfEnumeratedDPlayServices))
      {
          TRACE("WARNING network: LbNetwork_Init() bad DPlay service index\n");
          return -1;
      }
      if ( DPlayInit(guid, &clientGuidTable[dpidx]) )
      {
        TRACE("WARNING network: LbNetwork_Init() failure on DPlayInit()\n");
        return -1;
      }
      break;
  }
  return 0;
}



struct ComputerProcessTypes ComputerProcessLists[] = {
  { "Build and defend Computer",  // ComputerProcessLists[0]
    60, 1, 1, 1, 100, 1, 5,
    { // processes
    &BuildLairRoom,
    &DigToEntrance,
    &DigToCloseGoldForMoney,
    &BuildHatcheryRoom,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &ComputerSightOfEvil,
    &ComputerSafeAttack,
    &ComputerAttack1,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   8000,    0, 0,  1600},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {move_creature_to_train_text, 0,  400, computer_check_move_creatures_to_room,     95,    6, 0,  7000},
      {check_enough_imps_text,      0,  203, computer_check_no_imps,                    16,    9, 0,     0},
      {check_to_pretty_text,        0,  405, computer_check_for_pretty,                  7,    0, 0,     0},
      {check_for_quick_attack_text, 0,  690, computer_check_for_quick_attack,           90, 3000, 7,  9500},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_enemy_entrances_text,  0,  290, computer_check_enemy_entrances,             0,    0, 0,     0},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0, 5580, computer_check_neutral_places,              0,    0, 0, 15000},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  301, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_dungeon_breach_text,     0,  4, computer_event_battle,    NULL,          295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle,    NULL,          295, NULL,              75, 1, 0, 0},
      {event_heart_under_attack_text, 0,  1, computer_event_battle,    NULL,          295, NULL,              99, 3, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle,    NULL,           -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Build and defend Computer",  // ComputerProcessLists[1]
    70, 1, 8, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &BuildHatcheryRoom,
    &DigToEntrance,
    &DigToGoldForMoney,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &DigToGoldGreedy,
    &ComputerSightOfEvil,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    &ComputerSafeAttack,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0, 500, computer_checks_hates,                    4000,    0, 0,     0},
      {move_creature_to_best_text,  0, 270, computer_check_move_creatures_to_best_room, 75,    0, 0,     0},
      {move_creature_to_train_text, 0, 400, computer_check_move_creatures_to_room,      95,    6, 0,  7000},
      {check_enough_imps_text,      0, 200, computer_check_no_imps,                     11,    5, 0,     0},
      {check_to_pretty_text,        0, 400, computer_check_for_pretty,                   7,    0, 0,     0},
      {check_for_quick_attack_text, 0, 390, computer_check_for_quick_attack,            60,    1, 0,     0},
      {check_for_speed_up_text,     0, 200, computer_check_for_accelerate,               0,    0, 0,     0},
      {check_for_slap_imp_text,     0, 250, computer_check_slap_imps,                   95,    0, 0,     0},
      {check_enemy_entrances_text,  0, 690, computer_check_enemy_entrances,              0,    0, 0,     0},
      {check_avail_door_text,       0, 330, computer_check_for_place_door,               0,    0, 0,     0},
      {check_avail_trap_text,       0, 430, computer_check_for_place_trap,               0,    0, 0,     0},
      {check_expand_room_text,      0, 200, computer_check_for_expand_room,              0,    0, 0,     0},
      {check_money_text,            0, 100, computer_check_for_money,                  500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Build and defend Computer",  // ComputerProcessLists[2]
    90, 1, 10, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &DigToCloseGoldForMoney,
    &BuildHatcheryRoom,
    &DigToEntrance,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &ComputerSightOfEvilScare,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  500, computer_checks_hates,                  40000,    0, 0,  2000},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {move_creature_to_train_text, 0,  400, computer_check_move_creatures_to_room,     95,    6, 0,  7000},
      {check_enough_imps_text,      0,  200, computer_check_no_imps,                    14,   12, 0,     0},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_expand_room_text,     0,101010, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_for_quick_attack_text, 0,  390, computer_check_for_quick_attack,           90,    1,14,112000},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Build and defend Computer",  // ComputerProcessLists[3]
    70, 1, 10, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom4x4,
    &BuildLairRoom4x4,
    &BuildAllRooms3x3,
    &DigToEntrance,
    &DigToCloseGoldForMoney,
    &ComputerSafeAttack,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   4000,    0, 0,  2000},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {check_enough_imps_text,      0,  200, computer_check_no_imps,                     3,    3, 0,     0},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  200, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Build and defend Computer",  // ComputerProcessLists[4]
    70, 1, 6, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom4x4,
    &BuildLairRoom4x4,
    &DigToEntrance,
    &DigToCloseGoldForMoney,
    &BuildAllRooms4x4,
    &ComputerSafeAttack,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   4000,    0, 0,  2000},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {check_enough_imps_text,      0,  200, computer_check_no_imps,                     3,    3, 0,     0},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0, 1780, computer_check_neutral_places,              0,    0, 0, 15000},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  210, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Build and defend Computer",  // ComputerProcessLists[5]
    85, 1, 10, 1, 500, 1, 10,
    { // processes
    &BuildTreasureRoom4x4,
    &BuildLairRoom4x4,
    &DigToEntrance,
    &DigToCloseGoldForMoney,
    &BuildAllRooms4x4,
    &ComputerSafeAttack,
    &ComputerSightOfEvil,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   4000,    0, 0,  2000},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {check_enough_imps_text,      0,  200, computer_check_no_imps,                    13,    5, 0,     0},
      {check_to_pretty_text,        0,  400, computer_check_for_pretty,                  7,    0, 0,     0},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0, 1780, computer_check_neutral_places,              0,    0, 0, 20000},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  201, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,             99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,             75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,             75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom,0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,    0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,             25, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,             75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,              5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,              1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,              0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,              0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,              0, 0, 0, 0},
    },
    0,
  },
  { "Computer Assist",  // ComputerProcessLists[6]
    95, 1, 1, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &DigToEntrance,
    &DigToCloseGoldForMoney,
    &BuildHatcheryRoom,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &ComputerSightOfEvil,
    &ComputerSafeAttack,
    &ComputerAttack1,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   4000,    0, 0,  2000},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {check_enough_imps_text,      0,  200, computer_check_no_imps,                    13,    2, 0,     0},
      {check_to_pretty_text,        0,  400, computer_check_for_pretty,                  7,    0, 0,     0},
      {check_for_quick_attack_text, 0,  390, computer_check_for_quick_attack,           90,    0,24,  3000},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_enemy_entrances_text,  0,  290, computer_check_enemy_entrances,             0,    0, 0,     0},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0,  780, computer_check_neutral_places,              0,    0, 0,     0},
      {check_avail_trap_text,       0,  330, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  201, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Computer Assist",  // ComputerProcessLists[7]
    45, 1, 1, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &BuildHatcheryRoom,
    &DigToCloseGoldForMoney,
    &DigToEntrance,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   4000,    0, 0,  2000},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {check_enough_imps_text,      0,  200, computer_check_no_imps,                    13,    2, 0,     0},
      {check_to_pretty_text,        0,  400, computer_check_for_pretty,                  7,    0, 0,     0},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0,  780, computer_check_neutral_places,              0,    0, 0,  5000},
      {check_avail_trap_text,       0,  330, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  201, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },
  { "Computer Assist",  // ComputerProcessLists[8]
    50, 1, 1, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &BuildHatcheryRoom,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &DigToEntrance,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_expand_room_text,      0,   10, computer_check_for_expand_room,             0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle,    NULL,          295, NULL,              99, 3, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
    },
    0,
  },



  { "Computer Assist",  // ComputerProcessLists[9]
    95, 1, 1, 1, 100, 1, 5,
    { // processes
    &ComputerSightOfEvil,
    &ComputerSafeAttack,
    &ComputerAttack1,
    &ComputerSightOfEvil,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {move_creature_to_train_text, 0,  400, computer_check_move_creatures_to_room,     95,    6, 0,  7000},
      {check_enough_imps_text,      0,  203, computer_check_no_imps,                    13,    9, 0,     0},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },

  { "Build and defend Computer",  // ComputerProcessLists[10]
    90, 1, 6, 1, 200, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &DigToEntrance,
    &DigToCloseGoldForMoney,
    &BuildHatcheryRoom,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &ComputerSightOfEvil,
    &ComputerSafeAttack,
    &ComputerAttack1,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   8000,    0, 0,  1600},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,70,    0, 0,     0},
      {move_creature_to_train_text, 0,  400, computer_check_move_creatures_to_room,     95,    6, 0,  7000},
      {check_enough_imps_text,      0,  203, computer_check_no_imps,                    13,    9, 0,     0},
      {check_for_quick_attack_text, 0,  390, computer_check_for_quick_attack,           90,    0,14, 24000},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_enemy_entrances_text,  0,  290, computer_check_enemy_entrances,             0,    0, 0,     0},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0, 5580, computer_check_neutral_places,              0,    0, 0, 25000},
      {check_avail_trap_text,       0,  330, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  201, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0, 1, computer_event_battle, NULL,              295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0, 4, computer_event_battle, NULL,              295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0, 2, computer_event_battle, NULL,               -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1, 1, NULL, computer_event_battle_test,          10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1, 1, NULL, computer_event_check_fighters,      100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2, 2, NULL, computer_event_attack_magic_foe,    100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3, 3, NULL, computer_event_check_rooms_full,    400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4, 4, NULL, computer_event_check_imps_in_danger, 40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },

  { "Build and defend Computer",  // ComputerProcessLists[11]
    60, 1, 1, 1, 100, 1, 5,
    { // processes
    &BuildTreasureRoom,
    &BuildLairRoom,
    &BuildHatcheryRoom,
    &DigToEntrance,
    &BuildResearchRoom,
    &BuildWorkshopRoom,
    &BuildTrainingRoom,
    &ComputerSightOfEvil,
    &ComputerSafeAttack,
    &ComputerAttack1,
    &BuildPrisonRoom,
    &BuildTortureRoom,
    &BuildBarrackRoom,
    &BuildGraveyardRoom,
    &BuildTempleRoom,
    &BuildScavengerRoom,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {computer_check_hates_text,   0,  400, computer_checks_hates,                   8000,    0, 0,  1600},
      {move_creature_to_best_text,  0,  270, computer_check_move_creatures_to_best_room,75,    0, 0,     0},
      {move_creature_to_train_text, 0,  400, computer_check_move_creatures_to_room,     95,    6, 0,  7000},
      {check_enough_imps_text,      0,  203, computer_check_no_imps,                    13,    9, 0,     0},
      {check_to_pretty_text,        0,  405, computer_check_for_pretty,                  7,    0, 0,     0},
      {check_for_quick_attack_text, 0,  390, computer_check_for_quick_attack,           90,    0, 14,14000},
      {check_for_speed_up_text,     0,  200, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,  250, computer_check_slap_imps,                  75,    0, 0,  -250},
      {check_enemy_entrances_text,  0,  290, computer_check_enemy_entrances,             0,    0, 0,     0},
      {check_avail_door_text,       0,  330, computer_check_for_place_door,              0,    0, 0,     0},
      {check_neutral_places_text,   0, 5580, computer_check_neutral_places,              0,    0, 0,     0},
      {check_avail_trap_text,       0,  430, computer_check_for_place_trap,              0,    0, 0,     0},
      {check_expand_room_text,      0,  201, computer_check_for_expand_room,             0,    0, 0,     0},
      {check_money_text,            0,  100, computer_check_for_money,                 500,-1000, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_heart_under_attack_text, 0,  1, computer_event_battle, NULL,             295, NULL,              99, 3, 0, 0},
      {event_dungeon_breach_text,     0,  4, computer_event_battle, NULL,             295, NULL,              75, 1, 0, 0},
      {event_room_attack_text,        0, 19, computer_event_battle, NULL,             295, NULL,              75, 3, 0, 0},
      {event_treasure_room_full_text, 0, 11, computer_event_find_link, NULL,         1195, &BuildTreasureRoom, 0, 0, 0, 0},
      {event_living_space_full_text,  0, 17, computer_event_find_link, NULL,         1195, &BuildLairRoom,     0, 0, 0, 0},
      {event_fight_text,              0,  2, computer_event_battle, NULL,              -2, NULL,              75, 1, 0, 0},
      {event_fight_test_text,         1,  1, NULL, computer_event_battle_test,         10, NULL,              75, 1, 0, 0},
      {event_check_fighters_text,     1,  1, NULL, computer_event_check_fighters,     100, NULL,               5, 0, 0, 0},
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {event_check_room_text,         3,  3, NULL, computer_event_check_rooms_full,   400, NULL,               0, 0, 0, 0},
      {event_save_imps_text,          4,  4, NULL, computer_event_check_imps_in_danger,40, NULL,               0, 0, 0, 0},
      {event_pay_day_text,            0, 12, computer_event_check_payday, NULL,      1195, NULL,               0, 0, 0, 0},
    },
    0,
  },

  { "Build and defend Computer",  // ComputerProcessLists[12]
    60, 1, 1, 1, 1, 1, 1,
    { // processes
    &DigToGoldGreedy2,
    &DigToGoldGreedy2,
    &DigToGoldGreedy2,
    &DigToGoldGreedy2,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {check_enough_imps_text,      0,   20, computer_check_no_imps,                    99,    9, 0,     0},
      {check_for_speed_up_text,     0,   19, computer_check_for_accelerate,              0,    0, 0,     0},
      {check_for_slap_imp_text,     0,   21, computer_check_slap_imps,                 100,    0, 0,  -250},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {event_magic_foe_text,          2,  2, NULL, computer_event_attack_magic_foe,   100, NULL,               1, 5, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
    },
    0,
  },

  {NULL,  // ComputerProcessLists[13]
    0, 0, 0, 0, 0, 0, 0,
    { // processes
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    },
    { // checks
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
      {NULL,                        0,    0, NULL,                                       0,    0, 0,     0},
    },
    { // events
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
      {NULL,                          0,  0, NULL,                     NULL,            0, NULL,               0, 0, 0, 0},
    },
    0,
  },
};


void draw_map_level_flags(void)
{
  struct MapLevel *maplv;
  struct MapFlag *mapflg;
  struct TbSprite *spr;
  unsigned long lv_num;
  long curr_mx,curr_my;
  long i,k,n;
  lv_num = game.level_number;
  maplv = get_map_level(lv_num);
  curr_mx = GetMouseX();
  curr_my = GetMouseY();
  if (lv_num > 5)
    i = 10;
  else
    i = 2;
  if (is_over_maplevel(maplv, curr_mx, curr_my))
    i += 4;
  k = timeGetTime()/200;
  spr = &map_flag[i+(k & 3)];
  if (spr < end_map_flag)
    LbSpriteDraw(maplv->ensign_x-map_info.field_16, maplv->ensign_y-spr->SHeight-map_info.field_1A, spr);
  for (n=0; n < BONUS_LEVELS_COUNT; n++)
  {
    mapflg = &map_bonus_level[n];
    if (game.bonus_levels[n])
    {
      if (n == MOON_BONUS_INDEX)
        i = 26;
      else
        i = 18;
      if (is_over_mapflag(mapflg, curr_mx, curr_my))
        i += 4;
      spr = &map_flag[i+(k & 3)];
      if (spr < end_map_flag)
        LbSpriteDraw(mapflg->map_x-map_info.field_16, mapflg->map_y-spr->SHeight-map_info.field_1A, spr);
    }
  }  
  if ((!game.bonus_levels[MOON_BONUS_INDEX]) && (is_near_full_moon))
  {
    mapflg = &map_bonus_level[MOON_BONUS_INDEX];
    spr = &map_flag[34];
    if (spr < end_map_flag)
      LbSpriteDraw(mapflg->map_x-map_info.field_16, mapflg->map_y-spr->SHeight-map_info.field_1A, spr);
  }
}


short input_map_level_flags(long curr_mx,long curr_my)
{
  lv_num = game.level_number;
  maplv = get_map_level(lv_num);
  if (is_over_maplevel(maplv, curr_mx, curr_my))
  {
      game.selected_lev_file_num = lv_num;
      map_info.field_0 = 1;
      map_info.field_1 = 1;
      map_info.field_6 = 1;
      map_info.field_A = map_info.field_16+curr_mx;
      map_info.field_E = map_info.field_1A+curr_my;
      map_info.field_2 = 4;
      map_info.field_12 = 7;
      set_map_info_visible_hotspot(map_info.field_A, map_info.field_E);
      map_info.field_1E = map_info.field_16 << 8;
      map_info.field_22 = map_info.field_1A << 8;
      return true;
  }
  for (n=0; n < BONUS_LEVELS_COUNT; n++)
  {
      mapflg = &map_bonus_level[n];
      if (game.bonus_levels[n])
        if (is_over_mapflag(mapflg, curr_mx, curr_my))
        {
          game.selected_lev_file_num = mapflg->lvnum;
          map_info.field_A = map_info.field_16 + curr_mx;
          map_info.field_E = map_info.field_1A + curr_my;
          map_info.field_0 = 1;
          map_info.field_1 = 1;
          map_info.field_6 = 1;
          map_info.field_2 = 4;
          map_info.field_12 = 7;
          set_map_info_visible_hotspot(map_info.field_A, map_info.field_E);
          map_info.field_1E = map_info.field_16 << 8;
          map_info.field_22 = map_info.field_1A << 8;
          return true;
        }
  }
  return false;
}
struct MapLevel map_level[] = {
  {0,     0,   0,   0, 0},
  {808, 546, 792, 546, 0},
  {927, 524, 911, 524, 0},
  {966, 704, 950, 704, 0},
  {838, 682, 826, 682, 0},
  {717, 617, 701, 617, 0},
  {590, 748, 550, 748, 0},
  {469, 688, 429, 688, 0},
  {519, 577, 479, 577, 0},
  {459, 518, 419, 518, 0},
  {403, 458, 363, 458, 0},
  {453, 379, 413, 379, 0},
  {559, 475, 519, 475, 0},
  {651, 550, 611, 550, 0},
  {694, 483, 654, 483, 0},
  {558, 397, 518, 397, 0},
  {686, 415, 646, 415, 0},
  {852, 445, 812, 445, 0},
  {929, 357, 889, 357, 0},
  {656, 318, 616, 318, 0},
  {601, 242, 525, 242, 0},
  {601, 242,   0,   0, 0},
};

struct MapFlag map_bonus_level[] = {
  {886, 488, 100},
  {872, 556, 101},
  {951, 524, 102},
  {940, 704, 103},
  {866, 682, 104},
  {741, 617, 105},
};

struct MapLevel *get_map_level(unsigned long lv_num)
{
  if ((lv_num <= 0) || (lv_num >= 22))
    return &(map_level[0]);
  return &(map_level[lv_num]);
}


short is_over_maplevel(struct MapLevel *maplv, long scr_x, long scr_y)
{
  long map_x,map_y,spr_w,spr_h;
  map_x = map_info.field_16+scr_x;
  map_y = map_info.field_1A+scr_y;
  spr_w = map_flag[10].SWidth;
  spr_h = map_flag[10].SHeight;
  if ((map_x >= maplv->ensign_x) && (map_x < maplv->ensign_x+spr_w)
   && (map_y > maplv->ensign_y-spr_h) && (map_y < maplv->ensign_y-(spr_h/3)))
      return true;
  return false;
}

short is_over_mapflag(struct MapFlag *mapflg, long scr_x, long scr_y)
{
  long map_x,map_y,spr_w,spr_h;
  map_x = map_info.field_16+scr_x;
  map_y = map_info.field_1A+scr_y;
  spr_w = map_flag[10].SWidth;
  spr_h = map_flag[10].SHeight;
  if ((map_x >= mapflg->map_x) && (map_x <  mapflg->map_x+spr_w)
   && (map_y > mapflg->map_y-spr_h) && (map_y < mapflg->map_y-(spr_h/3)))
      return true;
  return false;
}

short is_maplevel_in_screen_rect(struct MapLevel *maplv)
{
  if ((maplv->field_0 >= map_info.field_16) && (maplv->field_0 < map_info.field_16+lbDisplay.PhysicalScreenWidth))
    if ((maplv->field_4 >= map_info.field_1A) && (maplv->field_4 < map_info.field_1A+lbDisplay.PhysicalScreenHeight))
      return true;
  return false;
}

struct MapLevel { // sizeof = 20
  long field_0;
  long field_4;
  long ensign_x;
  long ensign_y;
  long field_10;
};

struct MapFlag { // sizeof = 12
  long map_x;
  long map_y;
  unsigned long lvnum;
};

/*
long get_available_value(char plyr_idx, long itype, long ikind)
{
  static const char *func_name="get_available_value";
  struct Dungeon *dungeon;
  dungeon = &(game.dungeon[plyr_idx%DUNGEONS_COUNT]);
  switch (itype)
  {
  case SVar_AVAILABLE_MAGIC: // IF_AVAILABLE(MAGIC)
      return dungeon->magic_level[ikind%KEEPER_SPELLS_COUNT];
  case SVar_AVAILABLE_TRAP: // IF_AVAILABLE(TRAP)
      return dungeon->trap_amount[ikind%TRAP_TYPES_COUNT];
  case SVar_AVAILABLE_DOOR: // IF_AVAILABLE(DOOR)
      return dungeon->door_amount[ikind%DOOR_TYPES_COUNT];
  case SVar_AVAILABLE_ROOM: // IF_AVAILABLE(ROOM)
      return dungeon->room_buildable[ikind%ROOM_TYPES_COUNT];
  default:
      LbWarnLog("%s: Unrecognized item type, no %d\n",func_name,itype);
      return 0;
  }
}
*/
/*
 * Function name spelling after the one in original game.
 */
TbBool process_avialable_status(long plyr_idx, long itype, long ikind, long val)
{
  static const char *func_name="process_avialable_status";
  long i;
  i = get_available_value(plyr_idx, itype, ikind);
  return (i == val);
}


CREDITS:
/*
  for (i = 0; credits[i] != NULL; i++)
  {
    if (h >= lbDisplay.PhysicalScreenHeight)
      break;
    if (h <= -LbTextHeight("Wq"))
    {
      if (*credits[i] == '*')
        ++i;
    } else
    {
        text = credits[i];
        nfont = 2;
        if (*text == '*')
        {
          i++;
          k = (int)credits[i];
          nfont = 1;
          text = gui_strings[k];
        }
        if (nfont != fontid)
        {
          fontid = nfont;
          lbFontPtr = frontend_font[nfont];
        }
        if (*text != '+')
        {
          LbTextDraw(0, h, text);
          did_draw = 1;
        } else
        {
          LbTextDraw(0, h, text+1);
          did_draw = 1;
        }
    }
    h += LbTextHeight("Wq") + 2;
  }
*/

const char *credits[] = {
"*",
(const char *)362,
"BULLFROG PRODUCTIONS LTD.",
" ",
" ",
"*",
(const char *)882,
"PETER MOLYNEUX",
"SIMON CARTER",
"MARK HEALEY",
"DENE CARTER",
"JONTY BARNES",
"ALEX PETERS",
" ",
" ",
"*",
(const char *)363,
"PETER MOLYNEUX",
" ",
" ",
"*",
(const char *)364,
"SIMON CARTER",
" ",
" ",
"*",
(const char *)365,
"MARK HEALEY",
" ",
" ",
"*",
(const char *)366,
"DENE CARTER",
"JONTY BARNES",
"ALEX PETERS",
" ",
" ",
"*",
(const char *)392,
"BARRIE PARKER",
"SHINTARO KANAOYA",
" ",
" ",
"*",
(const char *)368,
"RUSSELL SHAW",
" ",
" ",
"*",
(const char *)367,
"GLENN CORPES",
"MARTIN BELL",
" ",
" ",
"*",
(const char *)858,
"DARRAN THOMAS",
"PAUL MCLAUGHLIN",
" ",
" ",
"*",
(const char *)859,
"IAN SHAW",
" ",
" ",
"*",
(const char *)883,
"ANDY NUTTALL",
" ",
" ",
"*",
(const char *)371,
"MARK LAMPORT",
"IAN SHIPPEN",
"ALEX PETERS",
" ",
" ",
"*",
(const char *)860,
"SEAN MASTERSON",
"JAMES LEACH",
" ",
" ",
"*",
(const char *)372,
"ANDY ROBSON",
" ",
" ",
"*",
(const char *)373,
"ANDY ROBSON",
"NATHAN SMETHURST",
"STEVE LAWRIE",
" ",
" ",
"*",
(const char *)884,
"SIMON CARTER",
" ",
" ",
"*",
(const char *)572,
"MIKE MAN",
"JON FARMER",
"TONY DAWSON",
"NEIL KAMINSKI",
"MATT WEE",
"ADAM COGLAN",
"JOHN KERSHAW",
"JOE RIDER",
"SAUREV SARKAR",
"JASON CUNNINGHAM",
"DIANNA DAVIES",
" ",
" ",
"*",
(const char *)573,
"MARTIN BELL",
"DAVE STEWART",
"MARK LAMPORT",
"JAN SVAROVSKY",
"BEN DEANE",
"ALEX EVANS",
"TIM HARRIS",
"IAN SHAW",
"TONY COX",
" ",
" ",
"*",
(const char *)381,
"KEN MALCOLM",
"VINCE FARQUHARSON",
"PETER MOLYNEUX",
"MARK HEALEY",
"JONTY BARNES",
"ALEX PETERS",
"DENE CARTER",
"SIMON CARTER",
" ",
" ",
"*",
(const char *)394,
"ANDY TROWERS",
"TIM MINOR",
"WAYNE FROST",
"OLLY BYRNE",
"WAYNE IMLACH",
"DAN RILEY",
"JON RENNIE",
"TRISTAN PARAMOR",
"JEFF BRUTUS",
" ",
" ",
"*",
(const char *)383,
"MARK HUNTLEY",
"AUSTIN ELLIS",
" ",
" ",
"*",
(const char *)861,
"DENE CARTER",
"RICHARD RIDINGS",
" ",
" ",
"*",
(const char *)574,
"JON RENNIE",
"JAMES LEACH",
"NEIL COOK",
" ",
" ",
"*",
(const char *)575,
"ANDY NUTTALL",
"RICHARD REED",
"ANDY CAKEBREAD",
" ",
" ",
"*",
(const char *)376,
"CATHY CAMPOS",
"SEAN RATCLIFFE",
"PETE MURPHY",
" ",
"ANNABEL ROOSE",
"PETE LARSEN",
"TAMARA BURKE",
"CLARE JONES",
" ",
" ",
"*",
(const char *)377,
"MIKE BURNHAM",
"SIMON HANDBY",
"KEVIN DONKIN",
" ",
" ",
"*",
(const char *)862,
"ANNETTE DABB",
"LUCIA GOBBO",
" ",
" ",
"*",
(const char *)378,
"EMMA GIBBS",
"JO GOODWIN",
"AUDREY ADAMS",
"SIAN JONES",
"KATHY MCENTEE",
"LOUISE RATCLIFFE",
"FRANCES VAN EUPEN",
" ",
" ",
"*",
(const char *)864,
"CAROL AGGETT",
"PETRINA WALLACE",
"TRUDE OLEN",
" ",
" ",
"*",
(const char *)867,
"DAVID LAPP",
" ",
" ",
"*",
(const char *)385,
"CHRISTINE JEAN",
"ART OF WORDS, VERONIQUE VIRETTO",
"KIA COLLIN, CBG CONSULT",
"JULIO VALLADARES, RICARDO MARTINEZ",
"CTO STUDIOS SPA",
"IPS COMPUTER GROUP",
"GRYPHON GAME TRANSLATIONS",
"DAGMAR GELLER",
"BIANCA NORMANN",
" ",
" ",
"*",
(const char *)865,
"SIMON DAVISON",
" ",
" ",
"*",
(const char *)866,
"LIONEL BERRODIER",
"KAI PACYNA",
"ULF THOR",
"SASCHA MAIRESSE",
"MICHELE PINARDI",
"RICARDO MARTINEZ",
"WOJCIECH GIERASIMOWICZ",
"DANIEL ROTH",
" ",
" ",
"*",
(const char *)388,
"*",
(const char *)387,
"CAROLINE ARTHUR",
"JAMES NOLAN",
" ",
" ",
"*",
(const char *)390,
"RACHEL HOLMAN",
" ",
" ",
"*",
(const char *)375,
"LES EDGAR",
"DAVID BYRNE",
" ",
" ",
"*",
(const char *)863,
"MARK LEWIS",
"MATT WEBSTER",
"STEVE FITTON",
"BEN VINCENT",
" ",
" ",
"*",
(const char *)386,
"BERYL PORTER",
"JOANNA WATTS",
" ",
" ",
"*",
(const char *)379,
"MARK ADAMI",
"JUSTIN AMORE",
"ANDY BASS",
"ANDY BEALE",
"PETE BLOW",
"DAVID BRYSON",
"GARY CARR",
"MARTIN CARROLL",
"MATT CHILTON",
"ALEX CULLUM",
"MATT EYRE",
"IAIN HANCOCK",
"JEREMY LONGLEY",
"ANDY MCDONALD",
"STEVE METCALF",
"ADRIAN MOORE",
"MARK PITCHER",
"BJARNE RENE",
"CARSTEN SORENSEN",
"GARY STEAD",
"RAJAN TANDE",
"ALEX TROWERS",
"DAREN WATSON",
"NATALIE WHITE",
"MATTHEW WHITTON",
"MICHAEL WILLIS",
"ALAN WRIGHT",
" ",
" ",
NULL,
};

/*  This code can't be used to fix menus after screen mode change,
 because it can't properly support hidden menus.
void reinit_all_menus(void)
{
  unsigned char old_menu_stack[ACTIVE_MENUS_COUNT];
  unsigned short old_active_menus;
  old_active_menus = no_of_active_menus;
  memcpy(old_menu_stack,menu_stack,old_active_menus*sizeof(char));
  short i;
  // Disable all menus
  for (i=old_active_menus-1; i>=0; i--)
  {
    //LbSyncLog("OFF %d\n",old_menu_stack[i]);
    turn_off_menu(old_menu_stack[i]);
  }
  // Re-enable them, to update their properties
  for (i=0; i<old_active_menus; i++)
  {
    //LbSyncLog("ON %d\n",old_menu_stack[i]);
    turn_on_menu(old_menu_stack[i]);
  }
}
*/

short frontend_save_continue_game(long lvnum, short is_new_lvl)
{
  static const char *func_name="frontend_save_continue_game";
  //_DK_frontend_save_continue_game(lvnum,a2);
  if (is_new_lvl)
  {
    save_continue_game(lvnum);
    return true;
  } else
  {
    error(func_name, 1620, "Why are we here when it's not a new level");
    save_continue_game(SINGLEPLAYER_NOTSTARTED);
    return false;
  }
}
